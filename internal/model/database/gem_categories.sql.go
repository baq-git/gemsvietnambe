// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: gem_categories.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getAllGemCategories = `-- name: GetAllGemCategories :many
SELECT id, category_name, slug, description, created_at, updated_at
FROM gem_categories
`

func (q *Queries) GetAllGemCategories(ctx context.Context) ([]GemCategory, error) {
	rows, err := q.db.QueryContext(ctx, getAllGemCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GemCategory
	for rows.Next() {
		var i GemCategory
		if err := rows.Scan(
			&i.ID,
			&i.CategoryName,
			&i.Slug,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGemCategory = `-- name: GetGemCategory :one
SELECT id, category_name, slug, description, created_at, updated_at
FROM gem_categories
WHERE id = $1
`

func (q *Queries) GetGemCategory(ctx context.Context, id uuid.UUID) (GemCategory, error) {
	row := q.db.QueryRowContext(ctx, getGemCategory, id)
	var i GemCategory
	err := row.Scan(
		&i.ID,
		&i.CategoryName,
		&i.Slug,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
