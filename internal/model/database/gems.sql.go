// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: gems.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createGem = `-- name: CreateGem :one
INSERT INTO gems (
        id,
        gem_name,
        description,
        instruction,
        coordinates,
        gem_category_id,
        created_at,
        updated_at
    )
VALUES (
        gen_random_uuid(),
        $1,
        $2,
        $3,
        $4,
        $5,
        NOW(),
        NOW()
    )
RETURNING id, gem_category_id, gem_name, description, instruction, coordinates, created_at, updated_at
`

type CreateGemParams struct {
	GemName       string
	Description   string
	Instruction   string
	Coordinates   []float64
	GemCategoryID uuid.UUID
}

func (q *Queries) CreateGem(ctx context.Context, arg CreateGemParams) (Gem, error) {
	row := q.db.QueryRowContext(ctx, createGem,
		arg.GemName,
		arg.Description,
		arg.Instruction,
		pq.Array(arg.Coordinates),
		arg.GemCategoryID,
	)
	var i Gem
	err := row.Scan(
		&i.ID,
		&i.GemCategoryID,
		&i.GemName,
		&i.Description,
		&i.Instruction,
		pq.Array(&i.Coordinates),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteGem = `-- name: DeleteGem :exec
DELETE FROM gems
WHERE id = $1
`

func (q *Queries) DeleteGem(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteGem, id)
	return err
}

const getAllGems = `-- name: GetAllGems :many
SELECT id, gem_category_id, gem_name, description, instruction, coordinates, created_at, updated_at
FROM gems
`

func (q *Queries) GetAllGems(ctx context.Context) ([]Gem, error) {
	rows, err := q.db.QueryContext(ctx, getAllGems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Gem
	for rows.Next() {
		var i Gem
		if err := rows.Scan(
			&i.ID,
			&i.GemCategoryID,
			&i.GemName,
			&i.Description,
			&i.Instruction,
			pq.Array(&i.Coordinates),
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGem = `-- name: GetGem :one
SELECT gems.id, gem_category_id, gem_name, gems.description, instruction, coordinates, gems.created_at, gems.updated_at, gem_categories.id, category_name, slug, gem_categories.description, gem_categories.created_at, gem_categories.updated_at
FROM gems
    INNER JOIN gem_categories ON gems.gem_category_id = gem_categories.id
WHERE gems.id = $1
`

type GetGemRow struct {
	ID            uuid.UUID
	GemCategoryID uuid.UUID
	GemName       string
	Description   string
	Instruction   string
	Coordinates   []float64
	CreatedAt     time.Time
	UpdatedAt     time.Time
	ID_2          uuid.UUID
	CategoryName  string
	Slug          string
	Description_2 string
	CreatedAt_2   time.Time
	UpdatedAt_2   time.Time
}

func (q *Queries) GetGem(ctx context.Context, id uuid.UUID) (GetGemRow, error) {
	row := q.db.QueryRowContext(ctx, getGem, id)
	var i GetGemRow
	err := row.Scan(
		&i.ID,
		&i.GemCategoryID,
		&i.GemName,
		&i.Description,
		&i.Instruction,
		pq.Array(&i.Coordinates),
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID_2,
		&i.CategoryName,
		&i.Slug,
		&i.Description_2,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
	)
	return i, err
}

const updateGem = `-- name: UpdateGem :one
UPDATE gems
SET gem_name = $2,
    description = $3,
    instruction = $4,
    coordinates = $5,
    gem_category_id = $6,
    updated_at = NOW()
WHERE id = $1
RETURNING id, gem_category_id, gem_name, description, instruction, coordinates, created_at, updated_at
`

type UpdateGemParams struct {
	ID            uuid.UUID
	GemName       string
	Description   string
	Instruction   string
	Coordinates   []float64
	GemCategoryID uuid.UUID
}

func (q *Queries) UpdateGem(ctx context.Context, arg UpdateGemParams) (Gem, error) {
	row := q.db.QueryRowContext(ctx, updateGem,
		arg.ID,
		arg.GemName,
		arg.Description,
		arg.Instruction,
		pq.Array(arg.Coordinates),
		arg.GemCategoryID,
	)
	var i Gem
	err := row.Scan(
		&i.ID,
		&i.GemCategoryID,
		&i.GemName,
		&i.Description,
		&i.Instruction,
		pq.Array(&i.Coordinates),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
