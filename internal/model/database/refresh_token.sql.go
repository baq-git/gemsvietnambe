// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: refresh_token.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const deleteRefreshTokenByUserID = `-- name: DeleteRefreshTokenByUserID :exec
DELETE FROM refresh_tokens
WHERE user_id = $1
`

func (q *Queries) DeleteRefreshTokenByUserID(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteRefreshTokenByUserID, userID)
	return err
}

const retrieveRefreshToken = `-- name: RetrieveRefreshToken :one
SELECT id, refresh_token, user_id, revoked
FROM refresh_tokens
WHERE user_id = $1
`

func (q *Queries) RetrieveRefreshToken(ctx context.Context, userID uuid.UUID) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, retrieveRefreshToken, userID)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.UserID,
		&i.Revoked,
	)
	return i, err
}

const rotationRefreshToken = `-- name: RotationRefreshToken :exec
DELETE FROM refresh_tokens
WHERE id = $1
`

func (q *Queries) RotationRefreshToken(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, rotationRefreshToken, id)
	return err
}

const saveRefreshToken = `-- name: SaveRefreshToken :one
INSERT INTO refresh_tokens(
        id,
        refresh_token,
        user_id,
        revoked
    )
VALUES (
        gen_random_uuid(),
        $1,
        $2,
        FALSE
    )
RETURNING id, refresh_token, user_id, revoked
`

type SaveRefreshTokenParams struct {
	RefreshToken string
	UserID       uuid.UUID
}

func (q *Queries) SaveRefreshToken(ctx context.Context, arg SaveRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, saveRefreshToken, arg.RefreshToken, arg.UserID)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.UserID,
		&i.Revoked,
	)
	return i, err
}
